#include <fstream>

#ifndef KFF_IO
#define KFF_IO

// the configured options and settings for Tutorial
#define KFF_VERSION_MAJOR @KFF_VERSION_MAJOR@
#define KFF_VERSION_MINOR @KFF_VERSION_MINOR@


class Kff_file {
private:
	bool is_writer;
	bool is_reader;
	std::fstream fs;

	uint8_t major_version;
	uint8_t minor_version;

public:
	// encoding:           A  C  T  G
	uint8_t encoding[4] = {0, 1, 3, 2};
	uint64_t k_value = 0;
	uint64_t data_size = 0;
	uint64_t max_kmers = 255;

	// --- General functions ---
	/* Open the file filename with the mode mode.
	 * mode must be choose in the set of values {r: read, w: write}
	 */
	Kff_file(const char * filename, const char * mode);
	/* Close the file */
	void close();

	// --- header functions ---
	/* Set the encoding used to compact the nucleotides into 2-bits values.
	 * Only the two lower bits of each uint8_t will be used.
	 * The 4 2-bits values must be diferent to each other.
	 */
	void write_encoding(uint8_t a, uint8_t c, uint8_t g, uint8_t t);
	void read_encoding();
	void write_metadata(size_t size, char * data);
	uint32_t read_metadata(char * data);

	// --- general section ---
	// char read_section_name();

	// --- global variables ---
	/* Write the variable in a global variable section.
	 * If the current section is not a global var section, it close the previous section and open a gvs.
	 */
	// void write_variable(string name, uint64_t content);
	/* Read a variable from the file.
	 * The value is directly returned and the name is set in the name variable
	 */
	// uint64_t read_variable(string &s name);

	// raw section
	// minimizer section
};

#endif
