#include <fstream>
#include <unordered_map>

#ifndef KFF_IO
#define KFF_IO

// the configured options and settings for Tutorial
#define KFF_VERSION_MAJOR @KFF_VERSION_MAJOR@
#define KFF_VERSION_MINOR @KFF_VERSION_MINOR@

class Section_GV;
class Section_Raw;
class Section_Minimizer;

class Kff_file {
private:
	bool is_writer;
	bool is_reader;
	std::fstream fs;

	uint8_t major_version;
	uint8_t minor_version;


	friend class Section_GV;
	friend class Section_Raw;
	friend class Section_Minimizer;

public:
	// encoding:           A  C  T  G
	uint8_t encoding[4] = {0, 1, 3, 2};
	uint64_t k_value = 0;
	uint64_t data_size = 0;
	uint64_t max_kmers = 255;

	std::unordered_map<std::string, uint64_t> global_vars;

	// --- General functions ---
	/* Open the file filename with the mode mode.
	 * mode must be choose in the set of values {r: read, w: write}
	 */
	Kff_file(const char * filename, const char * mode);
	/* Close the file */
	void close();

	// --- header functions ---
	/* Set the encoding used to compact the nucleotides into 2-bits values.
	 * Only the two lower bits of each uint8_t will be used.
	 * The 4 2-bits values must be diferent to each other.
	 */
	void write_encoding(uint8_t a, uint8_t c, uint8_t g, uint8_t t);
	void read_encoding();
	void write_metadata(uint32_t size, char * data);
	uint32_t size_metadata();
	void read_metadata(uint32_t size, char * data);


	// --- general section ---
	char read_section_type();
	Section_GV open_section_GV();
	Section_Raw open_section_raw();
	Section_Minimizer open_section_minimizer();
};


class Section_GV {
private:
	Kff_file * file;
	long begining;
	uint64_t nb_vars;

	Section_GV(Kff_file * file);
	void read_section();
	void read_var();

	friend class Kff_file;

public:
	std::unordered_map<std::string, uint64_t> vars;
	
	void write_var(const std::string & var_name, uint64_t value);
	void close();
};


class Section_Raw {
private:
	Kff_file * file;
	long begining;

	friend class Kff_file;

	uint64_t k;
	uint64_t max;
	uint64_t data_size;
	uint8_t nb_kmers_bytes;

	Section_Raw(Kff_file * file, uint64_t k, uint64_t max, uint64_t data_size);
	uint32_t read_section_header();

public:
	uint32_t nb_blocks;

	uint64_t read_compacted_sequence(uint8_t* seq, uint8_t* data);
	void write_compacted_sequence(uint8_t* seq, uint64_t seq_size, uint8_t * data_array);
	void close();
};


class Section_Minimizer {
private:
	Kff_file * file;
	long begining;

	friend class Kff_file;

	uint64_t k;
	uint64_t m;
	uint8_t nb_bytes_mini;
	uint64_t max;
	uint64_t data_size;
	uint8_t nb_kmers_bytes;
	uint8_t mini_pos_bytes;

	Section_Minimizer(Kff_file * file, uint64_t k, uint64_t m, uint64_t max, uint64_t data_size);
	uint32_t read_section_header();

public:
	uint8_t * minimizer;
	uint32_t nb_blocks;

	void write_minimizer(uint8_t * minimizer);
	void write_compacted_sequence_without_mini(uint8_t* seq, uint64_t seq_size, uint64_t mini_pos, uint8_t * data_array);
	void write_compacted_sequence (uint8_t* seq, uint64_t seq_size, uint64_t mini_pos, uint8_t * data_array);
	uint64_t read_compacted_sequence_without_mini(uint8_t* seq, uint8_t* data, uint64_t & mini_pos);
	uint64_t read_compacted_sequence(uint8_t* seq, uint8_t* data);
	void close();
};


#endif
